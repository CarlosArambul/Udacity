import numpy as np

# Write a function that takes as input two lists Y, P,
# and returns the float corresponding to their cross-entropy.
def binary_cross_entropy(Y, P):
    return np.sum(-Y * np.log(P) - (1-Y)*np.log(1-P))

def multi_cross_entropy(Y, P):
    return -1 * np.sum(Y * np.log(P))

if __name__ == '__main__':
    assert np.allclose(4.8283137373, binary_cross_entropy(np.array([1,0,1,1]), np.array([0.4,0.6,0.1,0.5]))), 'bce seems a bit off'
    Y = np.array([[0, 1], [1, 0], [0, 1], [0, 1]])
    P = np.array([[0.6, 0.4], [0.4, 0.6], [0.9, 0.1], [0.5, 0.5]])
    assert np.allclose(4.8283137373, multi_cross_entropy(Y, P)), 'bce via mce seems a bit off'

    P = np.array([[.7, .2, .1],[.3, .4, .3],[.1, .5, .4]])
    Y = np.array([[1, 0 , 0], [0, 0, 1], [0, 0, 1]])
    assert 2.48 == np.round(multi_cross_entropy(Y, P), 2), 'mce seem a bit off'
